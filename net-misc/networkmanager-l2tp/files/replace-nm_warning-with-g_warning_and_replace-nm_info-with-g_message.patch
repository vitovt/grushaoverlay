diff -U4 -r orig/src/nm-l2tp-service.c patched/src/nm-l2tp-service.c
--- src/nm-l2tp-service.c	2011-01-31 18:13:05.000000000 +0000
+++ src/nm-l2tp-service.c	2012-01-16 19:58:15.178359666 +0000
@@ -129,9 +129,9 @@
 	dbus_connection_set_change_sigpipe (TRUE);
 
 	connection = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
 	if (!connection) {
-		nm_warning ("Could not get the system bus.  Make sure "
+		g_warning ("Could not get the system bus.  Make sure "
 		            "the message bus daemon is running!  Message: %s",
 		            error->message);
 		g_error_free (error);
 		g_object_unref (object);
@@ -151,9 +151,9 @@
 					   G_TYPE_INVALID)) {
 		dbus_g_connection_register_g_object (connection, NM_DBUS_PATH_L2TP_PPP, object);
 		success = TRUE;
 	} else {
-		nm_warning ("Could not register D-Bus service name.  Message: %s", error->message);
+		g_warning ("Could not register D-Bus service name.  Message: %s", error->message);
 		g_error_free (error);
 		g_object_unref (object);
 		object = NULL;
 	}
@@ -334,9 +334,9 @@
 impl_l2tp_service_set_ip4_config (NML2tpPppService *self,
                                   GHashTable *config_hash,
                                   GError **err)
 {
-	nm_info ("L2TP service (IP Config Get) reply received.");
+	g_message ("L2TP service (IP Config Get) reply received.");
 	g_signal_emit (G_OBJECT (self), signals[PLUGIN_ALIVE], 0);
 
 	/* Just forward the pppd plugin config up to our superclass; no need to modify it */
 	g_signal_emit (G_OBJECT (self), signals[IP4_CONFIG], 0, config_hash);
@@ -569,16 +569,16 @@
 
 	if (WIFEXITED (status)) {
 		error = WEXITSTATUS (status);
 		if (error != 0)
-			nm_warning ("xl2tpd exited with error code %d", error);
+			g_warning ("xl2tpd exited with error code %d", error);
 	}
 	else if (WIFSTOPPED (status))
-		nm_warning ("xl2tpd stopped unexpectedly with signal %d", WSTOPSIG (status));
+		g_warning ("xl2tpd stopped unexpectedly with signal %d", WSTOPSIG (status));
 	else if (WIFSIGNALED (status))
-		nm_warning ("xl2tpd died with signal %d", WTERMSIG (status));
+		g_warning ("xl2tpd died with signal %d", WTERMSIG (status));
 	else
-		nm_warning ("xl2tpd died from an unknown cause");
+		g_warning ("xl2tpd died from an unknown cause");
 
 	/* Reap child if needed. */
 	waitpid (priv->pid, NULL, WNOHANG);
 	priv->pid = 0;
@@ -640,9 +640,9 @@
 pppd_timed_out (gpointer user_data)
 {
 	NML2tpPlugin *plugin = NM_L2TP_PLUGIN (user_data);
 
-	nm_warning ("Looks like pppd didn't initialize our dbus module");
+	g_warning ("Looks like pppd didn't initialize our dbus module");
 	nm_vpn_plugin_failure (NM_VPN_PLUGIN (plugin), NM_VPN_CONNECTION_STATE_REASON_SERVICE_START_TIMEOUT);
 
 	return FALSE;
 }
@@ -720,15 +720,15 @@
 	gboolean is_name = FALSE;
 
 	s_vpn = (NMSettingVPN *) nm_connection_get_setting (connection, NM_TYPE_SETTING_VPN);
 	if (!s_vpn) {
-		nm_warning ("couldn't get VPN setting");
+		g_warning ("couldn't get VPN setting");
 		return NULL;
 	}
 
 	p = tmp = nm_setting_vpn_get_data_item (s_vpn, NM_L2TP_KEY_GATEWAY);
 	if (!tmp || !strlen (tmp)) {
-		nm_warning ("couldn't get L2TP VPN gateway IP address");
+		g_warning ("couldn't get L2TP VPN gateway IP address");
 		return NULL;
 	}
 
 	while (*p) {
@@ -750,9 +750,9 @@
 		hints.ai_family = AF_INET;
 		hints.ai_flags = AI_ADDRCONFIG;
 		err = getaddrinfo (tmp, NULL, &hints, &result);
 		if (err != 0) {
-			nm_warning ("couldn't look up L2TP VPN gateway IP address '%s' (%d)", tmp, err);
+			g_warning ("couldn't look up L2TP VPN gateway IP address '%s' (%d)", tmp, err);
 			return NULL;
 		}
 
 		/* FIXME: so what if the name resolves to multiple IP addresses?  We
@@ -772,9 +772,9 @@
 		freeaddrinfo (result);
 	} else {
 		errno = 0;
 		if (inet_pton (AF_INET, tmp, &addr) <= 0) {
-			nm_warning ("couldn't convert L2TP VPN gateway IP address '%s' (%d)", tmp, errno);
+			g_warning ("couldn't convert L2TP VPN gateway IP address '%s' (%d)", tmp, errno);
 			return NULL;
 		}
 	}
 	
@@ -782,9 +782,9 @@
 		value = g_slice_new0 (GValue);
 		g_value_init (value, G_TYPE_UINT);
 		g_value_set_uint (value, (guint32) addr.s_addr);
 	} else
-		nm_warning ("couldn't determine L2TP VPN gateway IP address from '%s'", tmp);
+		g_warning ("couldn't determine L2TP VPN gateway IP address from '%s'", tmp);
 
 	return value;
 }
 
@@ -860,9 +860,9 @@
 		return FALSE;
 	}
 	free_l2tpd_args (l2tpd_argv);
 
-	nm_info ("xl2tpd started with pid %d", pid);
+	g_message ("xl2tpd started with pid %d", pid);
 
 	NM_L2TP_PLUGIN_GET_PRIVATE (plugin)->pid = pid;
 	g_child_watch_add (pid, l2tpd_watch_cb, plugin);
 
@@ -1040,9 +1040,9 @@
 		tmp_int = strtol (value, NULL, 10);
 		if (errno == 0) {
 			write_config_option (pppopt_fd, "lcp-echo-failure %ld\n", tmp_int);
 		} else {
-			nm_warning ("failed to convert lcp-echo-failure value '%s'", value);
+			g_warning ("failed to convert lcp-echo-failure value '%s'", value);
 		}
 	} else {
 		write_config_option (pppopt_fd, "lcp-echo-failure 0\n");
 	}
@@ -1058,9 +1058,9 @@
 		tmp_int = strtol (value, NULL, 10);
 		if (errno == 0) {
 			write_config_option (pppopt_fd, "lcp-echo-interval %ld\n", tmp_int);
 		} else {
-			nm_warning ("failed to convert lcp-echo-interval value '%s'", value);
+			g_warning ("failed to convert lcp-echo-interval value '%s'", value);
 		}
 	} else {
 		write_config_option (pppopt_fd, "lcp-echo-interval 0\n");
 	}
@@ -1172,9 +1172,9 @@
 			g_timeout_add (2000, ensure_killed, GINT_TO_POINTER (priv->pid));
 		else
 			kill (priv->pid, SIGKILL);
 
-		nm_info ("Terminated ppp daemon with PID %d.", priv->pid);
+		g_message ("Terminated ppp daemon with PID %d.", priv->pid);
 		priv->pid = 0;
 	}
 
 	if (priv->connection) {
